package com.shsxt.newbosses.service;

import com.shsxt.newbosses.dao.UserDao;
import com.shsxt.newbosses.po.New_User;
import com.shsxt.newbosses.po.vo.ResultInfo;
import com.shsxt.newbosses.util.MD5Util;
import com.shsxt.newbosses.util.StringUtil;

public class UserService {
	
	private UserDao userDao = new UserDao();
	
	/**
	 *  1、判断参数是否为空（用户名和密码）
			如果为空，设置resultInfo对象中的code与msg，返回resultInfo
		2、调用Dao层的查询方法，得到用户对象
		3、判断用户对象是否为空
			如果为空，设置resultInfo对象中的code与msg，返回resultInfo
		4、将前台传递的密码加密
		5、将加密后的密码与数据库中查询到的密码作比较
			如果不一致，设置resultInfo对象中的code与msg，返回resultInfo
		6、如果密码正确，则表示登录成功，设置resultInfo对象中的code与msg、result，返回resultInfo
	 * @param userName
	 * @param pwd
	 * @return
	 */
	public ResultInfo<New_User> userLogin(String userName, String userPwd) {

		ResultInfo<New_User> resultInfo = new ResultInfo<>();
		
		New_User u = new New_User();
		u.setuName(userName);
		u.setuPwd(userPwd);
		
		resultInfo.setResult(u);
		
		//  1、判断参数是否为空（用户名和密码）
		if (StringUtil.isEmpty(userName) || StringUtil.isEmpty(userPwd)) {
			// 如果为空，设置resultInfo对象中的code与msg，返回resultInfo
			resultInfo.setCode(0);
			resultInfo.setMsg("用户名称或密码不能为空！");
			return resultInfo;
		}
		
		// 2、调用Dao层的查询方法，得到用户对象
		New_User user = userDao.findUserByName(userName);
		
		// 3、判断用户对象是否为空
		if (user == null) {
			// 如果为空，设置resultInfo对象中的code与msg，返回resultInfo
			resultInfo.setCode(0);
			resultInfo.setMsg("用户名不存在！");
			return resultInfo;
		}
		
		// 4、将前台传递的密码加密
		String pwd = MD5Util.encode(MD5Util.encode(userPwd));
		
		// 5、将加密后的密码与数据库中查询到的密码作比较
		if (!userPwd.equals(user.getuPwd())) {
			// 如果不一致，设置resultInfo对象中的code与msg，返回resultInfo
			resultInfo.setCode(0);
			resultInfo.setMsg("用户密码不正确！");
			return resultInfo;
		}
		
		// 6、如果密码正确，则表示登录成功，设置resultInfo对象中的code与msg、result，返回resultInfo
		resultInfo.setCode(1);
		resultInfo.setMsg("登录成功！");
		resultInfo.setResult(user);
		
		return resultInfo;
	}
	

}
