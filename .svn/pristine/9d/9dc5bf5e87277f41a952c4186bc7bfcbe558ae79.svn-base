package com.shsxt.newbosses.service;

import java.util.List;

import com.shsxt.newbosses.dao.NoteDao;
import com.shsxt.newbosses.po.New_Type;
import com.shsxt.newbosses.po.Note;
import com.shsxt.newbosses.po.vo.ResultInfo;
import com.shsxt.newbosses.util.StringUtil;

public class NoteService {
	private NoteDao noteDao = new NoteDao();

	public List<New_Type> findTypeList() {
		List<New_Type> list = new TypeService().findTypeList();
		
		return list;
	}

	public ResultInfo<Note> addOrUpdate(String typeId, String title, String content, Integer userId) {
		ResultInfo<Note> resultInfo = new ResultInfo<>();
		
		//  1、判断参数是否为空
		if (StringUtil.isEmpty(typeId)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("请选择帖子类型！");
			return resultInfo;
		}
		if (StringUtil.isEmpty(title)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("帖子标题不能为空！");
			return resultInfo;
		}
		if (StringUtil.isEmpty(content)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("帖子内容不能为空！");
			return resultInfo;
		}
		if (userId.equals(null)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("请先登录！");
			return resultInfo;
		}
		int row = noteDao.addOrUpdate(typeId,title,content,userId);
		
		if (row >0) {
			resultInfo.setCode(1);
		} else {
			resultInfo.setCode(0);
			resultInfo.setMsg("保存失败！");
		}
		return resultInfo;
	}
	
	/**
	 * 查询云记集合
	 * @param userId
	 * @return
	 */
	public List<Note> findNoteList() {
		List<Note> noteList = noteDao.findNoteList();
		return noteList;
	}

	/**
	 * 找类型列表，限定schId
	 * @param schId
	 * @return
	 */
	public List<New_Type> findTypeList(String schId) {
		List<New_Type> list = null;
		// 判断非空
		if(StringUtil.isEmpty(schId)){
			//
			list = new TypeService().findTypeList();
			System.out.println(schId+":数据库user表schId为空");
		}else{
			list = new TypeService().findTypeList(schId);
		}
		return list;
	}

	/**
	 * 验证类型的唯一性
	 *  1、判断参数（类型名）
		2、调用Dao层，查询类型记录，返回类型对象
		3、判断类型对象是否存在
			存在，code=0，msg=xx
			不存在，code=1.msg=xx
	 * @param typeId
	 * @param typeName
	 * @param schId
	 * @return
	 */
	public ResultInfo<New_Type> checkByNew_Type(String typeId, String typeName, String schId) {
		ResultInfo<New_Type> resultInfo = new ResultInfo<New_Type>();
		// 1. 判断参数
		if (StringUtil.isEmpty(typeName)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("类型名称不能为空！");
			return resultInfo;
		}
		if (StringUtil.isEmpty(schId)) {
			resultInfo.setCode(0);
			resultInfo.setMsg("请登录后发起话题");
			return resultInfo;
		}
		//2、调用Dao层，查询类型记录，返回类型对象
		New_Type type = noteDao.checkByNew_Type(typeId, typeName,schId);
		
		// 3、判断类型对象是否存在
		if (type == null) { // 不存在，code=1.msg=xx
			resultInfo.setCode(1);
		} else { // 存在，code=0，msg=xx
			// 如果存在，判断当前记录被占用
			resultInfo.setCode(0);
			resultInfo.setMsg("类型名称已被占用，请重新输入！");
		}
		
		return resultInfo;
	}

}
